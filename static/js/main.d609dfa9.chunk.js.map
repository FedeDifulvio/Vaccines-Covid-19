{"version":3,"sources":["API/CovidAPI.tsx","Hooks/useAPICovid.tsx","Components/DataVccines.tsx","Components/Processing.tsx","Components/ErrorMessage.tsx","Components/Search.tsx","App.tsx","index.tsx"],"names":["covidAPI","axios","create","baseURL","Capitalize","str","stepOne","toLowerCase","stepTwo","charAt","toUpperCase","slice","console","log","formatNumber","num","Intl","NumberFormat","format","DataVaccines","date","people_vaccinated","people_partially_vaccinated","population","country","updated","className","colSpan","split","Processing","state","ErrorMessage","result","processing","Search","useState","dataCountry","setDataCountry","setProcessing","setResult","getVaccines","countrySearch","a","Country","get","params","resp","data","All","useAPICovid","setCountry","onSubmit","e","preventDefault","name","placeholder","type","onChange","target","value","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d609dfa9.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n\r\n    export const covidAPI = axios.create({\r\n        baseURL: 'https://covid-api.mmediagroup.fr/v1'\r\n    });\r\n\r\n","import {  useState} from \"react\"\r\nimport { covidAPI } from \"../API/CovidAPI\"\r\nimport { Vacunas, CountryData } from '../Interfaces/ApiCovid';\r\n\r\nconst Capitalize = (str: string)=>{\r\n   const stepOne = str.toLowerCase()\r\n   const stepTwo = stepOne.charAt(0).toUpperCase() + stepOne.slice(1);\r\n   \r\n   console.log(stepTwo)\r\n   return stepTwo; \r\n}\r\n\r\nexport const useAPICovid = () => {\r\n\r\n   \r\n    const [dataCountry, setDataCountry] = useState<CountryData>();\r\n    const[processing, setProcessing]= useState<boolean>(false);\r\n    const [result, setResult] = useState<boolean>(false)\r\n \r\n    const getVaccines = async (countrySearch:string) =>{ \r\n\r\n        const Country = Capitalize(countrySearch)\r\n\r\n        setProcessing(true)\r\n\r\n        const resp = await covidAPI.get<Vacunas>(('/vaccines'), {\r\n            params:{\r\n                country:Country\r\n            }\r\n        }); \r\n\r\n         resp.data? setResult(true): setResult(false);\r\n       \r\n        setDataCountry(resp.data.All);\r\n        setProcessing(false); \r\n    } \r\n\r\n   \r\n    return{\r\n        dataCountry,\r\n        getVaccines,\r\n        processing,\r\n        result\r\n    }\r\n}\r\n \r\n\r\n   \r\n\r\n       \r\n        \r\n    \r\n","import { CountryData } from '../Interfaces/ApiCovid';\r\n\r\nconst formatNumber=(num:number)=>{\r\n const numForm = new Intl.NumberFormat().format(num);\r\n return numForm;  \r\n} \r\n\r\nconst formatDate = (date: string)=>{\r\n const newDate = date.split(\" \")[0]\r\n return newDate;\r\n}\r\nexport const DataVaccines = ({ people_vaccinated, people_partially_vaccinated, population, country, updated}:CountryData) => {\r\n    \r\n    return (\r\n      <>\r\n        <div className=\"row mt-5\">\r\n          <div className=\"col-md-4\"></div>\r\n          <div className=\"col-md-4\">\r\n            <table className=\"table centrado\">\r\n              <thead className=\"table-head\">\r\n                <tr>\r\n                  <td colSpan={2}> {country} </td>\r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"table-dark\">\r\n                <tr>\r\n                  <td>Population</td>\r\n                  <td>{formatNumber(population)}</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Vaccinated</td>\r\n                  <td>{formatNumber(people_vaccinated)}</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Partially vaccinated</td>\r\n                  <td>{formatNumber(people_partially_vaccinated)}</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Updated</td>\r\n                  <td>{formatDate(updated)}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div className=\"col-md-4\"></div>\r\n        </div>\r\n      </>\r\n    );\r\n}\r\n","\r\ninterface stateProcessing {\r\n    state: boolean\r\n}\r\n\r\nexport const Processing = ({state}:stateProcessing) => {\r\n    return (\r\n        <>\r\n         <div className=\"row\">\r\n        <div className=\"col-md-4\"></div>\r\n        <div className=\"col-md-4\">\r\n          {\r\n            state?(\r\n               <div className=\"alert alert-info mt-5\">\r\n                   <div><strong>Processing...</strong></div>\r\n                   <div className=\"spinner\"></div>\r\n               </div>\r\n            )  \r\n            :\r\n            (\r\n              <div> </div>\r\n            )\r\n          }\r\n        </div>\r\n        <div className=\"col-md-4\"></div>\r\n        </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n","\r\ninterface dataError{ \r\n\r\n    result: boolean \r\n    processing: boolean\r\n}\r\n\r\nexport const ErrorMessage = ({result, processing}: dataError) => {\r\n    return (\r\n      <>\r\n        <div className=\"row mt-5\">\r\n          <div className=\"col-md-4\"></div>\r\n          <div className=\"col-md-4\">\r\n            {\r\n                result && !processing ? \r\n                (\r\n                 <div className=\"alert alert-danger\"> Not found. </div>\r\n                ) \r\n                : \r\n                (\r\n                <div></div>\r\n                )\r\n            }\r\n          </div>\r\n          <div className=\"col-md-4\"></div>\r\n        </div>\r\n      </>\r\n    );\r\n}\r\n","import { useAPICovid } from \"../Hooks/useAPICovid\";\r\nimport { useState } from 'react';\r\nimport { DataVaccines } from './DataVccines';\r\nimport { Processing } from './Processing';\r\nimport { ErrorMessage } from \"./ErrorMessage\";\r\n\r\n\r\nexport const Search = () => {\r\n  const { dataCountry, getVaccines, processing, result} = useAPICovid();\r\n\r\n  const [country, setCountry] = useState<string>('') \r\n \r\n \r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4\"></div>\r\n          <div className=\"col-md-4\">\r\n            <form onSubmit={(e)=>{e.preventDefault()}}>\r\n              <input\r\n                className=\"form-control\"\r\n                name=\"country\"\r\n                placeholder=\"Country\"\r\n                type=\"text\"\r\n                onChange={(e)=>{setCountry(e.target.value)}}\r\n              />\r\n              <div className=\"d-grid gap-2\">\r\n                <button\r\n                  onClick={() => {\r\n                     getVaccines(country);\r\n                    \r\n                  }}\r\n                  className=\"btn btn-primary mt-3\"\r\n                >\r\n                  Search\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <div className=\"col-md-4\"></div>\r\n        </div>\r\n\r\n        <Processing state = {processing}/>\r\n    \r\n        <div> \r\n            {\r\n              dataCountry && !processing?  \r\n              (  \r\n                <DataVaccines {...dataCountry}/>  \r\n              ) \r\n              : \r\n              (  \r\n               <ErrorMessage result={result} processing={processing}/> \r\n              )\r\n            }\r\n  \r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","\nimport './App.css';\nimport { Search } from './Components/Search';\n\nfunction App() {\n  return (\n    <>\n       <div className=\"container-fluid\">\n         <div className=\"container centrado\">\n           <h3 className=\"mt-5 mb-5\">Covid Vaccines by Country</h3>\n         </div>\n         <Search/>\n       </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}